# == Define the target executable ===
TARGET = cosmicagenda
# ===================================

# ----- Compiler
CC = gcc

PKGCONFIG = $(shell which pkg-config)
CFLAGS = $(shell $(PKGCONFIG) --cflags gtk4)
LIBS = $(shell $(PKGCONFIG) --libs gtk4)
GLIB_COMPILE_RESOURCES = $(shell $(PKGCONFIG) --variable=glib_compile_resources gio-2.0)

# Define the source and header directories
SRC_DIR = src
C_SRC_DIR = $(SRC_DIR)/C
H_SRC_DIR = $(SRC_DIR)/H
BUILT_SRC = $(C_SRC_DIR)/resources.c
UI_DIR = $(SRC_DIR)/ui 

# Get a list of all the source files
SOURCES = $(wildcard $(C_SRC_DIR)/*.c)

# Get a list of all the header files
HEADERS = $(wildcard $(H_SRC_DIR)/*.h)

# Define the object files to be generated from the source files
OBJECTS = $(SOURCES:.c=.o) $(BUILT_SRC:.c=.o)
#OBJECTS = $(SOURCES:.c=.o)

# Generated by bear
COMPILE_CMDS = compile_commands.json

# UI builder files
G_RSC = $(SRC_DIR)/$(TARGET).gresource.xml

.PHONY: all clean cleanall build bear

# Define the default target
all: $(TARGET)

$(BUILT_SRC): $(G_RSC) $(TARGET)
	$(GLIB_COMPILE_RESOURCES) $(G_RSC) --target=$@ --sourcedir=$(UI_DIR) --generate-source

# Define the target executable and link the object files
$(TARGET): $(OBJECTS)
	$(CC) -o $(@F) $(OBJECTS) $(LIBS)

# Define a rule to compile the source files
%.o: %.c $(HEADERS)
	$(CC) $(CFLAGS) -c -o $@ $< -I$(H_SRC_DIR)

valgrind:
	make && valgrind --leak-check=yes ./$(TARGET)

run: build
	./$(TARGET)

build: bear

bear:
	bear -- make
	make clean

# Define a target to clean up generated files
clean:
	rm -f $(OBJECTS)
	rm -f $(BUILT_SRC)

# Define a target to clean up generated files
cleanall:
	rm -f $(TARGET)
	rm -f $(OBJECTS)
	rm -f $(BUILT_SRC)
	rm -f $(COMPILE_CMDS)


# VPATH:
# ------
# With VPATH set to VPATH = src:../header
# foo.o : foo.c
# is interpreted as if it were written like this:
# foo.o : src/foo.c
#
# Automatic Variables:
# --------------------
# $^ : Get list of all prerequisites
# $< : Get first prerequisite 
# $@ : Get target value
# 
# gcc `pkg-config --cflags gtk+-3.0` -o main main.c `pkg-config --libs gtk+-3.0`
# glib-compile-resources .gresource.xml --target=source/resources.c --generate-source
