# == Define the target executable ===
TARGET = viewmd
# ===================================

# ----- Compiler
CC = gcc

PKGCONFIG = $(shell which pkg-config)

CFLAGS = $(shell $(PKGCONFIG) --cflags gtk+-3.0 webkit2gtk-4.1)
LIBS = $(shell $(PKGCONFIG) --libs gtk+-3.0 webkit2gtk-4.1)
GLIB_COMPILE_RESOURCES = $(shell $(PKGCONFIG) --variable=glib_compile_resources gio-2.0)

# Define the source and header directories
SRC_DIR = src
BUILT_SRC = $(SRC_DIR)/resources.c
UI_DIR = $(SRC_DIR)/ui

# Get a list of all the source files
SOURCES = $(wildcard $(SRC_DIR)/*.c)

# Get a list of all the header files
HEADERS = $(wildcard $(SRC_DIR)/*.h)

# Define the object files to be generated from the source files
OBJECTS = $(SOURCES:.c=.o) $(BUILT_SRC:.c=.o)

# Generated by bear
COMPILE_CMDS_JSON = compile_commands.json

# UI builder files
G_RSC = $(SRC_DIR)/$(TARGET).gresource.xml
UI = $(wildcard $(UI_DIR)/*.ui)

.PHONY: all clean cleanall build bear run

# Define the default target
all: $(TARGET)

$(BUILT_SRC): $(G_RSC) $(UI)
	$(GLIB_COMPILE_RESOURCES) $(G_RSC) --target=$@ --sourcedir=$(UI_DIR) --generate-source

# Define a rule to compile the source files
%.o: %.c
	$(CC) $(CFLAGS) -c -o $@ $<

# Define the target executable and link the object files
$(TARGET): $(OBJECTS)
	$(CC) -o $(@F) $(OBJECTS) $(LIBS)

# Define a target to run the executable
run: bear
	./$(TARGET)

# Creates a compile_commands.json file for use with clangd
bear:
	@bear -- make -s > /dev/null || echo "bear FAILED: Is it installed?"
	@$(MAKE) -s clean

# Define a target to clean up generated files
clean:
	rm -f $(OBJECTS)
	rm -f $(BUILT_SRC)

# Define a target to clean up generated files
cleanall:
	rm -f $(TARGET)
	rm -f $(OBJECTS)
	rm -f $(BUILT_SRC)
	rm -f $(COMPILE_CMDS_JSON)

debug-make:
	@echo "SOURCES: $(SOURCES)"
	@echo "HEADERS: $(HEADERS)"
	@echo "OBJECTS: $(OBJECTS)"
	@echo "BUILT_SRC: $(BUILT_SRC)"
	@echo "G_RSC: $(G_RSC)"
	@echo "UI: $(UI)"
	@echo "LIBS: $(LIBS)"
	@echo "GLIB_COMPILE_RESOURCES: $(GLIB_COMPILE_RESOURCES)"


# VPATH:
# ------
# With VPATH set to VPATH = src:../header
# foo.o : foo.c
# is interpreted as if it were written like this:
# foo.o : src/foo.c
#
# Automatic Variables:
# --------------------
# $^ : Get list of all prerequisites
# $< : Get first prerequisite
# $@ : Get target value
#
# gcc `pkg-config --cflags gtk+-3.0` -o main main.c `pkg-config --libs gtk+-3.0`
# glib-compile-resources .gresource.xml --target=source/resources.c --generate-source
